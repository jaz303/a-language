%{
#include "menace/scanner.h"
#include <stdio.h>

#define YY_INPUT(buf, result, max_size)             \
{                                                   \
    int yyc = getc(ctx->file);                      \
    result = (EOF == yyc) ? 0 : (*(buf)=yyc, 1);    \
}

#define YY_CTX_LOCAL
#define YYSTYPE             token_t
#define YY_PARSE(T)         static T
#define MAX_INDENT          32
#define CURRENT_INDENT      (ctx->indents[ctx->indent_depth])

#define YY_CTX_MEMBERS                                  \
    FILE                *file;                          \
    int                 indent_depth;                   \
    int                 indents[MAX_INDENT];            \
    int                 pending_dents;                  \
    int                 pending_is_indent;              \
    token_t             pushback_token;                 \
    char                is_eof;                         \
    char                was_newline;                    \
    char                *error;
%}

Token           = INTEGER                           { $$ = T_INTEGER }
                | STRING                            { $$ = T_STRING }
                | Punctuation
                | Keyword
                | SYMBOL                            { $$ = T_SYMBOL }
                | IDENT                             { $$ = T_IDENT }
                | WHITESPACE                        { $$ = T_WHITESPACE }
                | EOL                               { $$ = T_EOL }
                | EOF                               { $$ = T_EOF }

INTEGER         = < '0' > ![xob]
                | < [1-9][0-9]* >
                | < '0x' HEX_DIGIT+ >
                | < '0o' OCT_DIGIT+ >
                | < '0b' BIN_DIGIT+ >
                
STRING          = ["] < STRING_CHAR* > ["]
                
Punctuation     = '+'                               { $$ = T_PLUS }
                | '-'                               { $$ = T_MINUS }
                | '*'       !'*'                    { $$ = T_TIMES }
                | '/'                               { $$ = T_DIV }
                | '%'                               { $$ = T_MOD }
                | '**'                              { $$ = T_POW }
                | '~'                               { $$ = T_TILDE }
                | '^'                               { $$ = T_HAT }
                | '!'       !'='                    { $$ = T_BANG }
                | '&'       !'&'                    { $$ = T_AMPERSAND }
                | '|'       !'|'                    { $$ = T_PIPE }
                | '&&'                              { $$ = T_DBL_AMPERSAND }
                | '||'                              { $$ = T_DBL_PIPE }
                | '=='                              { $$ = T_EQ }
                | '!='                              { $$ = T_NEQ }
                | '<'                               { $$ = T_LT }
                | '<='                              { $$ = T_LTE }
                | '>='                              { $$ = T_GTE }
                | '>'                               { $$ = T_GT }
                | '='       !'>'                    { $$ = T_EQUALS }
                | '=>'                              { $$ = T_HASHROCKET }
                | ':'       !IDENT_START            { $$ = T_COLON }
                | ','                               { $$ = T_COMMA }
                | '.'                               { $$ = T_DOT }
                | '('                               { $$ = T_L_PAREN }
                | ')'                               { $$ = T_R_PAREN }
                | '{'                               { $$ = T_L_BRACE }
                | '}'                               { $$ = T_R_BRACE }
                | '['                               { $$ = T_L_BRACKET }
                | ']'                               { $$ = T_R_BRACKET }
                
Keyword         = 'def'     !IDENT_REST             { $$ = T_DEF }
                | 'while'   !IDENT_REST             { $$ = T_WHILE }
                | 'if'      !IDENT_REST             { $$ = T_IF }    
                | 'elseif'  !IDENT_REST             { $$ = T_ELSEIF }
                | 'else'    !IDENT_REST             { $$ = T_ELSE }
                | 'true'    !IDENT_REST             { $$ = T_TRUE }
                | 'false'   !IDENT_REST             { $$ = T_FALSE }
                | 'pass'    !IDENT_REST             { $$ = T_PASS }
                | 'return'  !IDENT_REST             { $$ = T_RETURN }
                | 'and'     !IDENT_REST             { $$ = T_AND }
                | 'or'      !IDENT_REST             { $$ = T_OR }
                | 'not'     !IDENT_REST             { $$ = T_NOT }

SYMBOL          = ':' < IDENT_START IDENT_REST* >
IDENT           = < IDENT_START IDENT_REST* >

WHITESPACE      = < ( ' ' | '\t' ) + >
EOL             = '\r\n' | '\n' | '\r'
EOF             = !.

#
# Helpers

HEX_DIGIT       = [0-9a-fA-F]
OCT_DIGIT       = [0-7]
BIN_DIGIT       = [01]
IDENT_START     = [a-zA-Z_]
IDENT_REST      = [a-zA-Z0-9_]

NON_PRINTABLE   = [\000-\037] | '\177'
ESCAPE          = '\\' [rnftb'"\\]
STRING_CHAR     = ESCAPE | ( !'\\' !'"' !NON_PRINTABLE . )

%%

static token_t dequeue_pending_dent(yycontext *ctx) {
    ctx->pending_dents--;
    return ctx->pending_is_indent ? T_INDENT : T_OUTDENT;
}

static int handle_leading_whitespace(yycontext *ctx, int len) {
    int indent = 0;
    for (int i = 0; i < len; i++) {
        indent++;
        // if (ctx->text[i] == '\t') {
        //     indent = (indent + 1) & 0x03; // check
        // }
    }
    
    if (indent == CURRENT_INDENT) {
        return 1;
    } else if (indent > CURRENT_INDENT) { // indent
        ctx->indent_depth++;
        if (ctx->indent_depth == MAX_INDENT) {
            ctx->error = "maximum indent depth exceeded";
            return 0;
        } else {
            ctx->indents[ctx->indent_depth] = indent;
            ctx->pending_dents = 1;
            ctx->pending_is_indent = 1;
            return 1;
        }
    } else { // outdent
        ctx->pending_dents = 0;
        ctx->pending_is_indent = 0;
        while (1) {
            ctx->pending_dents++;
            ctx->indent_depth--;
            if (indent == CURRENT_INDENT) {
                return 1;
            } else if (indent > CURRENT_INDENT) {
                ctx->error = "indentation error";
                return 0;
            }
        }
    }
}

scanner_t* scanner_create_for_file(FILE *file) {
    yycontext *ctx = malloc(sizeof(yycontext));
    if (ctx) {
        ctx->text               = malloc(16);
        ctx->text[0]            = '\0';
        ctx->textlen            = 16;
        ctx->file               = file;
        ctx->indent_depth       = 1;
        ctx->indents[0]         = 0;
        ctx->pending_dents      = 1;
        ctx->pending_is_indent  = 1;
        ctx->pushback_token     = 0;
        ctx->is_eof             = 0;
        ctx->was_newline        = 0;
        ctx->error              = NULL;
    }
    return (scanner_t*)ctx;
}

void scanner_destroy(scanner_t *s) {
    yycontext *ctx = (yycontext*)s;
    if (ctx->buf)       free(ctx->buf);
    if (ctx->text)      free(ctx->text);
    if (ctx->thunks)    free(ctx->thunks);
    if (ctx->vals)      free(ctx->vals);
    free(ctx);
}

token_t scanner_get_next_token(scanner_t *s, char **text, int *len) {

    yycontext *ctx = (yycontext*)s;
    
    token_t out_token;
    
    if (ctx->error) {
        out_token = T_ERROR;
        
    } else if (ctx->pending_dents > 0) {
        out_token = dequeue_pending_dent(ctx);
        
    } else if (ctx->pushback_token) {
        out_token = ctx->pushback_token;
        ctx->pushback_token = 0;
        
    } else if (ctx->is_eof) {
        out_token = T_EOF;
        
    } else {
        while (1) {
            if (!yyparse(ctx)) {
                ctx->error = "parse error";
                out_token = T_ERROR;
                break;
            }
            
            if (ctx->yy == T_EOF) {
                ctx->is_eof = 1;
                
                // TODO: sanity check; technically there should be pending outdents
                ctx->pending_dents = ctx->indent_depth - 1;
                ctx->pending_is_indent = 0;
                out_token = T_OUTDENT;
                
                /* ensure every input line has an EOL so that statements are terminated */
                if (!ctx->was_newline) {
                    ctx->pending_dents++;
                    out_token = T_EOL;
                }
                
                break;
            
            } else if (ctx->yy == T_EOL) {
                out_token = T_EOL;
                break;
            
            } else if (ctx->was_newline) {
                if (ctx->yy == T_WHITESPACE) {
                    int res = handle_leading_whitespace(ctx, strlen(ctx->text));
                    if (!res) {
                        out_token = T_ERROR;
                        break;
                    } else if (ctx->pending_dents > 0) {
                        out_token = dequeue_pending_dent(ctx);
                        break;
                    } else {
                        ctx->was_newline = 0;
                        continue;
                    }
                } else {
                    int res = handle_leading_whitespace(ctx, 0);
                    if (!res) {
                        out_token = T_ERROR;
                        break;
                    } else if (ctx->pending_dents > 0) {
                        ctx->pushback_token = ctx->yy;
                        out_token = dequeue_pending_dent(ctx);
                        break;
                    } else {
                        out_token = ctx->yy;
                        break;
                    }
                }
            
            } else {
                out_token = ctx->yy;
                break;
            
            }
        }
    }
    
    ctx->was_newline = (out_token == T_EOL);
    
    if (text)   *text   = ctx->text;
    if (len)    *len    = strlen(ctx->text);
    
    return out_token;
    
}
