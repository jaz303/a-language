%{
#include "menace/global.h"
#include "menace/parser.h"
#include "menace/scanner.h"
#include "menace/ast.h"
#include "menace/intern.h"

#include <stdio.h>
#include <stdlib.h>

#define YY_INPUT(buf, result, max_size)                                                 \
{                                                                                       \
    int yyc = scanner_get_next_token(ctx->scanner, &ctx->token_text, &ctx->token_len);  \
    if (yyc == T_EOF) { \
        printf("BBOM!\n"); \
        exit(1); \
    } \
    printf("%d %d %s\n", T_EOF, yyc, token_get_name(yyc)); \
    result = (T_EOF == yyc) ? 0 : (*(buf)=yyc, 1);                                      \
}

#define YY_CTX_LOCAL        1
#define YYSTYPE             void*
#define YY_PARSE(T)         static T

#define YY_CTX_MEMBERS                  \
    scanner_t           *scanner;       \
    context_t           *context;       \
    char                *token_text;    \
    int                 token_len;      \
    char                *error;
    
#define AST_MAKE(type, ...) ast_mk_##type(ctx->context, ##__VA_ARGS__)
#define CTX                 ctx->context
#define TEXT                ctx->token_text

static INT decode_integer(const char *str) {
    // TODO: detect overflow
    INT val = 0;
    int len = strlen(str);
    if (len > 2 && str[1] == 'x') {
        for (str+=2;*str;str++) {
            if (*str == '_') continue;
            val *= 16;
            if (*str >= 'a')        val += (*str - 'a' + 10);
            else if (*str >= 'A')   val += (*str - 'A' + 10);
            else                    val += (*str - '0');
        }
    } else if (len > 2 && str[1] == 'o') {
        for (str+=2;*str;str++) {
            if (*str == '_') continue;
            val *= 8;
            val += (*str) - '0';
        }
    } else if (len > 2 && str[1] == 'b') {
        for (str+=2;*str;str++) {
            if (*str == '_') continue;
            val *= 2;
            val += (*str) - '0';
        }
    } else {
        for (;*str;str++) {
            if (*str == '_') continue;
            val *= 10;
            val += (*str) - '0';
        }
    }
    return val;
}

static char* decode_string(char *str) {
    return str;
}
%}

# Points to consider:
# Assignment should probably be an expression
# Function_Args should always be visited, even if empty (so we get AST node)

Program                 = stmts:Statement_Block END_OF_FILE         { $$ = stmts }

Statement_Block         = INDENT EOL* stmts:Statements OUTDENT      { $$ = stmts }

Statements              =   stmt:Statement EOL*                     { $$ = AST_MAKE(statements, stmt); }
                            cons:Statements?                        { ast_cons_statements($$, cons); }

Statement               = if_stmt:If_Statement                      { $$ = if_stmt }
                        | while_stmt:While_Statement                { $$ = while_stmt }
                        | pass_stmt:Pass_Statement                  { $$ = pass_stmt }
                        | assign_stmt:Assign_Statement              { $$ = assign_stmt }
                        | expr_stmt:Expression_Statement            { $$ = expr_stmt }
                        | return_stmt:Return_Statement              { $$ = return_stmt }
                        | named_fn_stmt:Named_Function_Def          { $$ = named_fn_stmt }

#
# If/elseif/else statement

If_Statement            =   cond:If_Part                    { $$ = AST_MAKE(if, cond) }
                            cons:If_Cons?                   { ast_cons_cond(cond, cons) }

If_Cons                 =   cond:Elseif_Part                { $$ = cond }
                            cons:If_Cons?                   { ast_cons_cond(cond, cons) }
                        |   cond:Else_Part                  { $$ = cond }

If_Part                 = IF - exp:Expression Block_Prelude body:Statement_Block
                        { $$ = AST_MAKE(condition, exp, body) }
                        
Elseif_Part             = ELSEIF - exp:Expression Block_Prelude body:Statement_Block
                        { $$ = AST_MAKE(condition, exp, body) }

Else_Part               = ELSE Block_Prelude body:Statement_Block
                        { $$ = AST_MAKE(condition, NULL, body) }

#
# While statement

While_Statement         = WHILE - exp:Expression Block_Prelude body:Statement_Block
                        { $$ = AST_MAKE(while, exp, body) }

#
# Pass statement

Pass_Statement          = PASS - EOL
                        { $$ = AST_MAKE(pass) }

#
# Assignment statement

Assign_Statement        = target:Expression - EQUALS - value:Expression - EOL
                        { $$ = AST_MAKE(assign, target, value) }

#
# Expression statement

Expression_Statement    = exp:Expression - EOL
                        { $$ = exp }

#
# Return statement

Return_Statement        = RETURN - EOL                      { $$ = AST_MAKE(return, NULL) }
                        | RETURN - exp:Expression EOL       { $$ = AST_MAKE(return, exp) }
                        
#
# Function definition

Named_Function_Def      = DEF - name:IDENT - params:Parameter_List? Block_Prelude body:Statement_Block
                        { $$ = AST_MAKE(named_function,
                                        string_to_intern(CTX, TEXT),
                                        params,
                                        body) }
                          
Parameter_List          = empty:Empty_Parameters                    { $$ = empty }
                        | non_empty:Non_Empty_Parameters            { $$ = non_empty }

Empty_Parameters        = L_PAREN - R_PAREN                         { $$ = NULL }
Non_Empty_Parameters    = L_PAREN - params:Parameters - R_PAREN     { $$ = params }
Parameters              = id:IDENT                                  { $$ = AST_MAKE(parameters, string_to_intern(CTX, TEXT)) }
                            -
                            (   COMMA -
                                cons:Parameters                     { ast_cons_parameters($$, cons) }
                            )?

#
# Expressions

Expression              = exp:Exp1                          { $$ = exp }

# conditional expression here

Exp1                    = l:Exp2                            { $$ = l }
                            (       L_OR - r:Exp2           { $$ = ast_mk_binary_exp(CTX, T_L_OR, $$, r) }
                            ) * -

Exp2                    = l:Exp3                            { $$ = l }
                            (       L_AND - r:Exp3          { $$ = ast_mk_binary_exp(CTX, T_L_AND, $$, r) }
                            ) * -

Exp3                    = l:Exp4                            { $$ = l }
                            (       (B_AND - r:Exp4)        { $$ = ast_mk_binary_exp(CTX, T_B_AND, $$, r) }
                                |   (B_OR  - r:Exp4)        { $$ = ast_mk_binary_exp(CTX, T_B_OR, $$, r) }
                                |   (B_XOR - r:Exp4)        { $$ = ast_mk_binary_exp(CTX, T_B_XOR, $$, r) }
                            ) * -
                            
Exp4                    = l:Exp5                            { $$ = l }
                            (       (EQ  - r:Exp5)          { $$ = ast_mk_binary_exp(CTX, T_EQ, $$, r) }
                                |   (NEQ - r:Exp5)          { $$ = ast_mk_binary_exp(CTX, T_NEQ, $$, r) }
                            ) * -
                            
Exp5                    = l:Exp6                            { $$ = l }
                            (       (LT  - r:Exp6)          { $$ = ast_mk_binary_exp(CTX, T_LT, $$, r) }
                                |   (LTE - r:Exp6)          { $$ = ast_mk_binary_exp(CTX, T_LTE, $$, r) }
                                |   (GT  - r:Exp6)          { $$ = ast_mk_binary_exp(CTX, T_GT, $$, r) }
                                |   (GTE - r:Exp6)          { $$ = ast_mk_binary_exp(CTX, T_GTE, $$, r) }
                            ) * -
                            
# shift operators here

Exp6                    = l:Exp7                            { $$ = l }
                            (       (PLUS  - r:Exp7)        { $$ = ast_mk_binary_exp(CTX, T_PLUS, $$, r) }
                                |   (MINUS - r:Exp7)        { $$ = ast_mk_binary_exp(CTX, T_MINUS, $$, r) }
                            ) * -
                            
Exp7                    = l:Exp8                            { $$ = l }
                            (       (TIMES - r:Exp8)        { $$ = ast_mk_binary_exp(CTX, T_TIMES, $$, r) }
                                |   (DIV   - r:Exp8)        { $$ = ast_mk_binary_exp(CTX, T_DIV, $$, r) }
                                |   (MOD   - r:Exp8)        { $$ = ast_mk_binary_exp(CTX, T_MOD, $$, r) }
                                |   (POW   - r:Exp8)        { $$ = ast_mk_binary_exp(CTX, T_POW, $$, r) }
                            ) * -

Exp8                    = PLUS exp:Exp7             -       { $$ = AST_MAKE(unary_exp, T_PLUS, exp) }
                        | MINUS exp:Exp7            -       { $$ = AST_MAKE(unary_exp, T_MINUS, exp) }
                        | exp:Exp9                  -       { $$ = exp }
                                                    
Exp9                    = B_NOT exp:Exp9            -       { $$ = AST_MAKE(unary_exp, T_B_NOT, exp) }
                        | L_NOT exp:Exp9            -       { $$ = AST_MAKE(unary_exp, T_L_NOT, exp) }
                        | exp:Primary Selector*     -       { $$ = exp }

# !! constructor should be a case here, if constructor is to be special
# NOTE: Primary does not consume trailing space (to ensure Selector
# follows immediately)
Primary                 = L_PAREN - exp:Expression - R_PAREN        { $$ = exp }
                        | IDENT                                     { $$ = AST_MAKE(ident, string_to_intern(CTX, TEXT)) }
                        | value:Value                               { $$ = value }

Selector                = DOT IDENT Arguments?
                        | L_BRACKET Expression_List R_BRACKET

Value                   = INTEGER           { $$ = AST_MAKE(integer, decode_integer(TEXT)) }
                        | STRING            { $$ = AST_MAKE(string, decode_string(TEXT)) }
                        | SYMBOL            { $$ = AST_MAKE(symbol, string_to_intern(CTX, TEXT)) }
                        | TRUE              { $$ = AST_MAKE(true) }
                        | FALSE             { $$ = AST_MAKE(false) }
                        | array:Array       { $$ = array }
                        | dict:Dict         { $$ = dict }

#
# Array literal

Array                   = empty:Empty_Array                                     { $$ = empty }
                        | non_empty:Array_With_Elements                         { $$ = non_empty }
Empty_Array             = L_BRACKET - R_BRACKET                                 { $$ = AST_MAKE(empty_array) }
Array_With_Elements     = L_BRACKET - els:Array_Elements - R_BRACKET            { $$ = AST_MAKE(array, els) }

Array_Elements          =   exp:Expression                                      { $$ = AST_MAKE(array_members, exp) }
                            (   COMMA -
                                cons:Array_Elements                             { ast_cons_array_members($$, cons) }
                            )?

#
# Dictionary Literal

Dict                    = empty:Empty_Dict                                      { $$ = empty }
                        | non_empty:Dict_With_Elements                          { $$ = non_empty }
Empty_Dict              = L_BRACE - R_BRACE                                     { $$ = AST_MAKE(empty_dict) }
Dict_With_Elements      = L_BRACE - els:Dict_Elements - R_BRACE                 { $$ = AST_MAKE(dict, els) }

Dict_Elements           =   key:Expression - HASHROCKET - value:Expression -    { $$ = AST_MAKE(dict_members, key, value ) }
                            (   COMMA -
                                cons:Dict_Elements                              { ast_cons_dict_members($$, cons) }
                            )?

#
# Expression list/arguments
 
Expression_List         = expr:Expression (COMMA - cons:Expression_List)? -
                        { $$ = AST_MAKE(expressions, expr, cons) }

Arguments               = empty:Empty_Arguments 
                        | non_empty:Non_Empty_Arguments
                        
Empty_Arguments         = L_PAREN - R_PAREN
                        { $$ = NULL }
                        
Non_Empty_Arguments     = L_PAREN - expr:Expression_List - R_PAREN
                        { $$ = expr }

#
# Helpers

Block_Prelude           = - COLON - EOL
-                       = WHITESPACE*
END_OF_FILE             = !.

B_AND                   = AMPERSAND
B_OR                    = PIPE
B_NOT                   = TILDE
B_XOR                   = HAT

L_AND                   = DBL_AMPERSAND | AND
L_OR                    = DBL_PIPE | OR
L_NOT                   = BANG | NOT

# This stuff is auto-generated from tokens.x by `rake parser_tokens`
# BEGIN-TOKENS
INTEGER = [\001]
STRING = [\002]
IDENT = [\003]
SYMBOL = [\004]
DEF = [\005]
WHILE = [\006]
IF = [\007]
ELSEIF = [\010]
ELSE = [\011]
TRUE = [\012]
FALSE = [\013]
PASS = [\014]
RETURN = [\015]
AND = [\016]
OR = [\017]
NOT = [\020]
PLUS = [\021]
MINUS = [\022]
TIMES = [\023]
DIV = [\024]
MOD = [\025]
POW = [\026]
TILDE = [\027]
HAT = [\030]
BANG = [\031]
AMPERSAND = [\032]
PIPE = [\033]
DBL_AMPERSAND = [\034]
DBL_PIPE = [\035]
EQ = [\036]
NEQ = [\037]
LT = [\040]
LTE = [\041]
GT = [\042]
GTE = [\043]
EQUALS = [\044]
HASHROCKET = [\045]
COLON = [\046]
COMMA = [\047]
DOT = [\050]
L_PAREN = [\051]
R_PAREN = [\052]
L_BRACE = [\053]
R_BRACE = [\054]
L_BRACKET = [\055]
R_BRACKET = [\056]
WHITESPACE = [\057]
EOL = [\060]
EOF = [\061]
INDENT = [\062]
OUTDENT = [\063]
ERROR = [\064]
# END-TOKENS

%%

parser_t *parser_create(context_t *c, scanner_t *s) {
    yycontext *parser = malloc(sizeof(yycontext));
    if (parser) {
        memset(parser, 0, sizeof(yycontext));
        parser->context = c;
        parser->scanner = s;
    }
    return (parser_t*)parser;
}

ast_statements_t* parser_parse(parser_t *p) {
    if (!yyparse((yycontext*)p)) {
        return NULL;
    } else {
        return (ast_statements_t*)((yycontext*)p)->yy;
    }
}
